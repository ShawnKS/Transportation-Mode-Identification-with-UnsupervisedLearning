import torch
import torch.nn.functional as F
import os
import torchvision
from torch import nn
import numpy as np
from torch.utils.data import Dataset, DataLoader, TensorDataset
num_epochs = 100
batch_size = 128
learning_rate = 1e-3

class autoencoder(nn.Module):
    def __init__(self):
        super(autoencoder,self).__init__()
        self.encoder = nn.Sequential(
            nn.Conv2d(1 , 32 , (1,3)),
            nn.ReLU(True),
            nn.Conv2d(32 , 32 , (1,3)),
            nn.ReLU(True),
            nn.MaxPool2d((1,2)), nn.ReLU(True),
            nn.Conv2d(32 , 64 , (1,3)),
            nn.ReLU(True),
            nn.Conv2d(64 , 64 , (1,3)),
            nn.ReLU(True),
            nn.MaxPool2d((1,2)), nn.ReLU(True)
        )
        self.decoder = nn.Sequential(
            nn.MaxUnpool2d((1,2)), nn.ReLU(True),
            nn.ConvTranspose2d(64,64, (1,3)),
            nn.ReLU(True),
            nn.ConvTranspose2d(64,64, (1,3)),
            nn.ReLU(True),
            nn.MaxUnpool2d((1,2)), nn.ReLU(True),
            nn.ConvTranspose2d(64,32, (1,3)), nn.ReLU(True),
            nn.ConvTranspose2d(32,32, (1,3)), nn.ReLU(True),
            nn.Linear(32,4) , nn.ReLU(True)
        )

        def forward(self,x):
            x = self.encoder(x)
            x = self.decoder(x)
            return x

        model = autoencoder().cuda()
        criterion = nn.MSELoss()
        optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate, weight_decay=1e-5)

        for epoch in range(num_epochs):
            for

